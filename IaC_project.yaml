AWSTemplateFormatVersion: "2010-09-09"
Description: This is IaC Project, first creating an EC2 Instance
Parameters:
   dbInstanceClass:
    Default: db.t2.micro
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type. 

   DBAllocatedStorage:
    Default: '8'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '5'
    MaxValue: '20'
    ConstraintDescription: must be between 05 and 20 GiB.

   DBUsername:
    Description: Username for MySQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain on

   DBPassword:
    NoEcho: 'true'
    Description: Password MySQL database access
    Type: String
    MinLength: '04'
    MaxLength: '15'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric character

   SSHLocation:
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Default: 0.0.0.0/0
    Description: The IP address range that can be used to access the web server and web app using SSH.
    MaxLength: '40'
    MinLength: '5'
    Type: String

   Environment:
      Type: String
      AllowedValues: [ Testing environment, Production environment ]

Conditions:
     EnvironmentIsProduction: !Equals [ !Ref Environment, Production environment ]

Resources:
   InitialiseVPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: 10.0.0.0/16           
            EnableDnsHostnames: true
            EnableDnsSupport: true


   
   PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties: 
             VpcId: !Ref InitialiseVPC
             AvailabilityZone: "eu-west-1a"
             CidrBlock: 10.0.1.0/24
             MapPublicIpOnLaunch: true

   PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties: 
            VpcId: !Ref   InitialiseVPC
            AvailabilityZone: "eu-west-1a"
            CidrBlock: 10.0.2.0/24
            MapPublicIpOnLaunch: true

          
   PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties: 
            VpcId: !Ref InitialiseVPC
            AvailabilityZone: "eu-west-1b"
            CidrBlock: 10.0.11.0/24
            MapPublicIpOnLaunch: false 

   PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties: 
            VpcId: !Ref InitialiseVPC
            AvailabilityZone: "eu-west-1b"
            CidrBlock: 10.0.12.0/24
            MapPublicIpOnLaunch: false
           

   myInternetGateway: 
        Type: AWS::EC2::InternetGateway             

   AttachGateway:
       Type: AWS::EC2::VPCGatewayAttachment
       Properties:
          VpcId: !Ref InitialiseVPC
          InternetGatewayId: !Ref myInternetGateway
   
   myrouteTableId: 
     Type: AWS::EC2::RouteTable
     Properties:
         VpcId: !Ref InitialiseVPC

   myRoute:
      Type: AWS::EC2::Route
      DependsOn: AttachGateway
      Properties:
        RouteTableId: !Ref myrouteTableId
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref myInternetGateway
            

   AWSSubnetRouteTableAsso:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
         RouteTableId: !Ref myrouteTableId
         SubnetId: !Ref PublicSubnet1


   AWSSubnetRouteTableAsso2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
         RouteTableId: !Ref myrouteTableId
         SubnetId: !Ref PublicSubnet2
                       
   webappSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
       GroupDescription: "Enable HTTP from 0.0.0.0/0"
       VpcId: !Ref InitialiseVPC
       SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp:  !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref SSHLocation
       SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp:  !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref SSHLocation

   DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
         GroupDescription: "DataBase Security Group"
         VpcId: !Ref InitialiseVPC
         SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 9595
                ToPort: 9595
                SourceSecurityGroupId: !Ref webappSecurityGroup
              - IpProtocol: tcp
                FromPort: 9596
                ToPort: 9596
                
   PublicEC2Instance1:
        Type: AWS::EC2::Instance
        DependsOn: 
              - myRoute
        Properties: 
            ImageId: ami-046a9f26a7f14326b
            InstanceType: t2.micro
            SubnetId: !Ref PublicSubnet1
            SecurityGroupIds:
                  - !Ref webappSecurityGroup

            UserData:
              Fn::Base64: |

                 #!/bin/bash
                 yum update -y 
                 yum install httpd -y
                 systemctl start httpd
                 systemctl enable httpd
                 echo "<html><body><h1>hello</h1></body></html>" > /var/myapp/hello.html
                 cd /var/myapp


   PrivateInstance:
        Type: AWS::EC2::Instance
        DependsOn: 
              - myRoute
        Properties: 
            ImageId: ami-046a9f26a7f14326b
            InstanceType: t2.micro
            SubnetId: !Ref PrivateSubnet2
            SecurityGroupIds:
                  - !Ref webappSecurityGroup


   PublicInstance2:
        Type: AWS::EC2::Instance
        DependsOn: 
              - myRoute
        Properties: 
            ImageId: ami-046a9f26a7f14326b
            InstanceType: t2.micro
            SubnetId: !Ref PublicSubnet2
            SecurityGroupIds:
                  - !Ref webappSecurityGroup
                 
          
   PrivateMasterDatabaseInstance:
        Type: AWS::RDS::DBInstance
        Properties:
             AvailabilityZone: "eu-west-1b"
             DBInstanceClass: !Ref dbInstanceClass
             AllocatedStorage: !Ref DBAllocatedStorage
             Engine: MySQL
             MasterUsername: !Ref DBUsername
             MasterUserPassword: !Ref DBPassword
             PubliclyAccessible: false
             Port: 9595
              
          
   PublicDatabaseReplica:
        Type: AWS::RDS::DBInstance
        Condition: EnvironmentIsProduction
        Properties: 
            SourceDBInstanceIdentifier: !Ref  PrivateMasterDatabaseInstance
            DBInstanceClass: !Ref dbInstanceClass
            Engine: MySQL
            PubliclyAccessible: true
            Port: 9596


   InitializingLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets: 
       - Ref: PrivateSubnet1
       - Ref: PublicSubnet1
      SecurityGroups: 
       - !Ref webappSecurityGroup